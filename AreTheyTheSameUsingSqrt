<!php
/* Php 7

Task:

Given two arrays a and b write a function comp(a, b) (compSame(a, b) in Clojure) that checks whether the two arrays have the "same" elements, with the same multiplicities. "Same" means, here, that the elements in b are the elements in a squared, regardless of the order.
Examples

Valid arrays
a = [121, 144, 19, 161, 19, 144, 19, 11]  
b = [121, 14641, 20736, 361, 25921, 361, 20736, 361]

comp(a, b) returns true because in b 121 is the square of 11, 14641 is the square of 121, 20736 the square of 144, 361 the square of 19, 25921 the square of 161, and so on. It gets obvious if we write b's elements in terms of squares:
a = [121, 144, 19, 161, 19, 144, 19, 11] 
b = [11*11, 121*121, 144*144, 19*19, 161*161, 19*19, 144*144, 19*19]

Invalid arrays
If we change the first number to something else, comp may not return true anymore:
a = [121, 144, 19, 161, 19, 144, 19, 11]  
b = [132, 14641, 20736, 361, 25921, 361, 20736, 361]

comp(a,b) returns false because in b 132 is not the square of any number of a.

a = [121, 144, 19, 161, 19, 144, 19, 11]  
b = [121, 14641, 20736, 36100, 25921, 361, 20736, 361]

comp(a,b) returns false because in b 36100 is not the square of any number of a.

*/

//test code
class AreTheyTheSameTestCases extends TestCase
{
    private function revTest($actual, $expected) {
        $this->assertEquals($expected, $actual);
    }
    public function testBasics() {        
        $a1 = [121, 144, 19, 161, 19, 144, 19, 11];
        $a2 = [11*11, 121*121, 144*144, 19*19, 161*161, 19*19, 144*144, 19*19];
        $this->revTest(comp($a1, $a2), true);
        $a1 = [121, 144, 19, 161, 19, 144, 19, 11];
        $a2 = [11*21, 121*121, 144*144, 19*19, 161*161, 19*19, 144*144, 19*19];
        $this->revTest(comp($a1, $a2), false);
    }
}

/* My code*/
//USort function
function sortSomething($a, $b){
  if ($a == $b) {
      return 0;
  }
  return ($a < $b) ? -1 : 1;
}

//core function
function comp($a1, $a2) {    
  //prevent null arrays
  if(!isset($a2) && !isset($a1)){
     return true;   
  }else if(!isset($a2) || !isset($a1)){
    return false;
  }

  else{   
    //need to sort the arrays to prevent duplications 
    usort($a1, 'sortSomething');
    usort($a2, 'sortSomething');     
    //check each a2 index against a1 index.
    foreach($a2 as $key=>$value){
      if(!(sqrt($value) == $a1[$key])){
        return false;
      }
    }           
    return true;
  }
?>
